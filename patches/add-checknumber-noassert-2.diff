diff -ru lua-5.1.5/src/lmathlib.c lua-5.1.5-changes/src/lmathlib.c
--- lua-5.1.5/src/lmathlib.c	2007-12-27 14:02:25.000000000 +0100
+++ lua-5.1.5-changes/src/lmathlib.c	2025-05-26 17:11:36.007091352 +0200
@@ -24,127 +24,127 @@
 
 
 static int math_abs (lua_State *L) {
-  lua_pushnumber(L, fabs(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, fabs(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_sin (lua_State *L) {
-  lua_pushnumber(L, sin(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, sin(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_sinh (lua_State *L) {
-  lua_pushnumber(L, sinh(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, sinh(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_cos (lua_State *L) {
-  lua_pushnumber(L, cos(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, cos(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_cosh (lua_State *L) {
-  lua_pushnumber(L, cosh(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, cosh(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_tan (lua_State *L) {
-  lua_pushnumber(L, tan(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, tan(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_tanh (lua_State *L) {
-  lua_pushnumber(L, tanh(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, tanh(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_asin (lua_State *L) {
-  lua_pushnumber(L, asin(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, asin(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_acos (lua_State *L) {
-  lua_pushnumber(L, acos(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, acos(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_atan (lua_State *L) {
-  lua_pushnumber(L, atan(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, atan(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_atan2 (lua_State *L) {
-  lua_pushnumber(L, atan2(luaL_checknumber(L, 1), luaL_checknumber(L, 2)));
+  lua_pushnumber(L, atan2(luaL_checknumber_noassert(L, 1), luaL_checknumber_noassert(L, 2)));
   return 1;
 }
 
 static int math_ceil (lua_State *L) {
-  lua_pushnumber(L, ceil(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, ceil(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_floor (lua_State *L) {
-  lua_pushnumber(L, floor(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, floor(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_fmod (lua_State *L) {
-  lua_pushnumber(L, fmod(luaL_checknumber(L, 1), luaL_checknumber(L, 2)));
+  lua_pushnumber(L, fmod(luaL_checknumber_noassert(L, 1), luaL_checknumber_noassert(L, 2)));
   return 1;
 }
 
 static int math_modf (lua_State *L) {
   double ip;
-  double fp = modf(luaL_checknumber(L, 1), &ip);
+  double fp = modf(luaL_checknumber_noassert(L, 1), &ip);
   lua_pushnumber(L, ip);
   lua_pushnumber(L, fp);
   return 2;
 }
 
 static int math_sqrt (lua_State *L) {
-  lua_pushnumber(L, sqrt(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, sqrt(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_pow (lua_State *L) {
-  lua_pushnumber(L, pow(luaL_checknumber(L, 1), luaL_checknumber(L, 2)));
+  lua_pushnumber(L, pow(luaL_checknumber_noassert(L, 1), luaL_checknumber_noassert(L, 2)));
   return 1;
 }
 
 static int math_log (lua_State *L) {
-  lua_pushnumber(L, log(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, log(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_log10 (lua_State *L) {
-  lua_pushnumber(L, log10(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, log10(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_exp (lua_State *L) {
-  lua_pushnumber(L, exp(luaL_checknumber(L, 1)));
+  lua_pushnumber(L, exp(luaL_checknumber_noassert(L, 1)));
   return 1;
 }
 
 static int math_deg (lua_State *L) {
-  lua_pushnumber(L, luaL_checknumber(L, 1)/RADIANS_PER_DEGREE);
+  lua_pushnumber(L, luaL_checknumber_noassert(L, 1)/RADIANS_PER_DEGREE);
   return 1;
 }
 
 static int math_rad (lua_State *L) {
-  lua_pushnumber(L, luaL_checknumber(L, 1)*RADIANS_PER_DEGREE);
+  lua_pushnumber(L, luaL_checknumber_noassert(L, 1)*RADIANS_PER_DEGREE);
   return 1;
 }
 
 static int math_frexp (lua_State *L) {
   int e;
-  lua_pushnumber(L, frexp(luaL_checknumber(L, 1), &e));
+  lua_pushnumber(L, frexp(luaL_checknumber_noassert(L, 1), &e));
   lua_pushinteger(L, e);
   return 2;
 }
 
 static int math_ldexp (lua_State *L) {
-  lua_pushnumber(L, ldexp(luaL_checknumber(L, 1), luaL_checkint(L, 2)));
+  lua_pushnumber(L, ldexp(luaL_checknumber_noassert(L, 1), luaL_checkint(L, 2)));
   return 1;
 }
 
@@ -152,10 +152,10 @@
 
 static int math_min (lua_State *L) {
   int n = lua_gettop(L);  /* number of arguments */
-  lua_Number dmin = luaL_checknumber(L, 1);
+  lua_Number dmin = luaL_checknumber_noassert(L, 1);
   int i;
   for (i=2; i<=n; i++) {
-    lua_Number d = luaL_checknumber(L, i);
+    lua_Number d = luaL_checknumber_noassert(L, i);
     if (d < dmin)
       dmin = d;
   }
@@ -166,10 +166,10 @@
 
 static int math_max (lua_State *L) {
   int n = lua_gettop(L);  /* number of arguments */
-  lua_Number dmax = luaL_checknumber(L, 1);
+  lua_Number dmax = luaL_checknumber_noassert(L, 1);
   int i;
   for (i=2; i<=n; i++) {
-    lua_Number d = luaL_checknumber(L, i);
+    lua_Number d = luaL_checknumber_noassert(L, i);
     if (d > dmax)
       dmax = d;
   }
